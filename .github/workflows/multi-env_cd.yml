name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK (for Java applications; modify if using other languages)
      - name: Set up JDK 11
        if: ${{ inputs.app_type == 'java' }}
        uses: actions/setup-java@v3
        with:
          java-version: '11'

      # Step 3: Build the application based on application type
      - name: Build Application
        run: |
          if [ "${{ inputs.app_type }}" == "java" ]; then
            mvn clean install
          elif [ "${{ inputs.app_type }}" == "node" ]; then
            npm install && npm run build
          elif [ "${{ inputs.app_type }}" == "python" ]; then
            python -m venv venv
            source venv/bin/activate
            pip install -r requirements.txt
            python setup.py build
          fi

      # Step 4: SonarQube scan
      - name: SonarQube Scan
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          if [ "${{ inputs.app_type }}" == "java" ]; then
            mvn sonar:sonar
          elif [ "${{ inputs.app_type }}" == "node" ]; then
            npm run sonar
          elif [ "${{ inputs.app_type }}" == "python" ]; then
            sonar-scanner
          fi

      # Step 5: Checkmarx Security Scanning
      - name: Checkmarx Security Scan
        env:
          CHECKMARX_API_KEY: ${{ secrets.CHECKMARX_API_KEY }}
          CHECKMARX_PROJECT_NAME: 'YourProjectName'
        run: |
          curl -X POST "https://checkmarx-api-url/api/scans" \
               -H "Authorization: Bearer $CHECKMARX_API_KEY" \
               -H "Content-Type: application/json" \
               -d '{"projectName": "$CHECKMARX_PROJECT_NAME", "sourceLocation": "./"}'

      # Step 6: Publish to Artifactory
      - name: Publish to Artifactory
        env:
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          if [ "${{ inputs.app_type }}" == "java" ]; then
            curl -u $ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD \
                 -T target/your-artifact.jar \
                 "$ARTIFACTORY_URL/path/to/repository/your-artifact.jar"
          elif [ "${{ inputs.app_type }}" == "node" ]; then
            curl -u $ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD \
                 -T dist/your-artifact.zip \
                 "$ARTIFACTORY_URL/path/to/repository/your-artifact.zip"
          elif [ "${{ inputs.app_type }}" == "python" ]; then
            curl -u $ARTIFACTORY_USERNAME:$ARTIFACTORY_PASSWORD \
                 -T dist/your-artifact.whl \
                 "$ARTIFACTORY_URL/path/to/repository/your-artifact.whl"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Deployment steps based on environment selection
      - name: Deploy to Development Environment
        if: ${{ inputs.deploy_env == 'development' }}
        run: |
          echo "Deploying to Development environment"
          # Add deployment script for Development environment
          # Example: kubectl apply -f deployment/dev.yaml

      - name: Deploy to Staging Environment
        if: ${{ inputs.deploy_env == 'staging' }}
        run: |
          echo "Deploying to Staging environment"
          # Add deployment script for Staging environment
          # Example: kubectl apply -f deployment/staging.yaml

      - name: Deploy to Production Environment
        if: ${{ inputs.deploy_env == 'production' }}
        run: |
          echo "Deploying to Production environment"
          # Add deployment script for Production environment
          # Example: kubectl apply -f deployment/prod.yaml
